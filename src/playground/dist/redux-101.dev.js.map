{"version":3,"sources":["redux-101.js"],"names":["incrementCount","incrementBy","type","decrementCount","decrementBy","setCount","count","resetCount","countReducer","state","action","store","subscribe","console","log","getState","dispatch"],"mappings":";;AAAA;;AAEA,IAAMA,cAAc,GAAG,SAAjBA,cAAiB;AAAA,iFAAuB,EAAvB;AAAA,8BAAGC,WAAH;AAAA,MAAGA,WAAH,iCAAiB,CAAjB;;AAAA,SAA+B;AAClDC,IAAAA,IAAI,EAAE,WAD4C;AAElDD,IAAAA,WAAW,EAAXA;AAFkD,GAA/B;AAAA,CAAvB;;AAKA,IAAME,cAAc,GAAG,SAAjBA,cAAiB;AAAA,kFAAuB,EAAvB;AAAA,gCAAGC,WAAH;AAAA,MAAGA,WAAH,kCAAiB,CAAjB;;AAAA,SAA+B;AAClDF,IAAAA,IAAI,EAAE,WAD4C;AAElDE,IAAAA,WAAW,EAAXA;AAFkD,GAA/B;AAAA,CAAvB;;AAKA,IAAMC,QAAQ,GAAG,SAAXA,QAAW;AAAA,kFAAa,EAAb;AAAA,MAAGC,KAAH,SAAGA,KAAH;;AAAA,SAAqB;AAClCJ,IAAAA,IAAI,EAAE,KAD4B;AAElCI,IAAAA,KAAK,EAALA;AAFkC,GAArB;AAAA,CAAjB;;AAIA,IAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA,SAAO;AACtBL,IAAAA,IAAI,EAAE;AADgB,GAAP;AAAA,CAAnB,C,CAIA;AACA;AACA;;;AAEA,IAAMM,YAAY,GAAG,SAAfA,YAAe,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzB;AAAEH,IAAAA,KAAK,EAAE;AAAT,GAAyB;AAAA,MAAXI,MAAW;;AACnD,UAAQA,MAAM,CAACR,IAAf;AACI,SAAK,WAAL;AACI,aAAO;AACHI,QAAAA,KAAK,EAAEG,KAAK,CAACH,KAAN,GAAcI,MAAM,CAACT;AADzB,OAAP;;AAGJ,SAAK,WAAL;AACI,aAAO;AACHK,QAAAA,KAAK,EAAEG,KAAK,CAACH,KAAN,GAAcI,MAAM,CAACN;AADzB,OAAP;;AAGJ,SAAK,OAAL;AACI,aAAO;AACHE,QAAAA,KAAK,EAAE;AADJ,OAAP;;AAGJ,SAAK,KAAL;AACI,aAAO;AACHA,QAAAA,KAAK,EAAEI,MAAM,CAACJ;AADX,OAAP;;AAGJ;AACI,aAAOG,KAAP;AAlBR;AAoBH,CArBD;;AAuBA,IAAME,KAAK,GAAG,wBAAYH,YAAZ,CAAd;AAEAG,KAAK,CAACC,SAAN,CAAgB,YAAM;AAClBC,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACI,QAAN,EAAZ;AACH,CAFD;AAIAJ,KAAK,CAACK,QAAN,CAAehB,cAAc,CAAC;AAAEC,EAAAA,WAAW,EAAE;AAAf,CAAD,CAA7B;AACAU,KAAK,CAACK,QAAN,CAAehB,cAAc,EAA7B;AACAW,KAAK,CAACK,QAAN,CAAeT,UAAU,EAAzB;AACAI,KAAK,CAACK,QAAN,CAAeb,cAAc,EAA7B;AACAQ,KAAK,CAACK,QAAN,CAAeb,cAAc,CAAC;AAAEC,EAAAA,WAAW,EAAE;AAAf,CAAD,CAA7B;AACAO,KAAK,CAACK,QAAN,CAAeX,QAAQ,CAAC;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAAD,CAAvB","sourcesContent":["import { createStore } from 'redux';\r\n\r\nconst incrementCount = ({ incrementBy = 1 } = {}) => ({\r\n    type: 'INCREMENT',\r\n    incrementBy\r\n});\r\n\r\nconst decrementCount = ({ decrementBy = 1 } = {}) => ({\r\n    type: 'DECREMENT',\r\n    decrementBy\r\n});\r\n\r\nconst setCount = ({ count } = {}) => ({\r\n    type: 'SET',\r\n    count\r\n})\r\nconst resetCount = () => ({\r\n    type: 'RESET',\r\n})\r\n\r\n//Reducer\r\n//Pure function (not depending on outside data)\r\n//Never change state or action\r\n\r\nconst countReducer = (state = { count: 0 }, action) => {\r\n    switch (action.type) {\r\n        case 'INCREMENT':\r\n            return {\r\n                count: state.count + action.incrementBy\r\n            };\r\n        case 'DECREMENT':\r\n            return {\r\n                count: state.count - action.decrementBy\r\n            };\r\n        case 'RESET':\r\n            return {\r\n                count: 0\r\n            };\r\n        case 'SET':\r\n            return {\r\n                count: action.count\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst store = createStore(countReducer);\r\n\r\nstore.subscribe(() => {\r\n    console.log(store.getState());\r\n});\r\n\r\nstore.dispatch(incrementCount({ incrementBy: 5 }));\r\nstore.dispatch(incrementCount());\r\nstore.dispatch(resetCount());\r\nstore.dispatch(decrementCount());\r\nstore.dispatch(decrementCount({ decrementBy: 10 }));\r\nstore.dispatch(setCount({ count: 101 }));\r\n\r\n"],"file":"redux-101.dev.js"}