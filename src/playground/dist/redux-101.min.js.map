{"version":3,"sources":["redux-101.js"],"names":["_redux","require","incrementCount","_ref$incrementBy","arguments","length","undefined","incrementBy","type","_ref2$decrementBy","decrementBy","setCount","count","resetCount","countReducer","state","action","createStore","store","console","log","getState","dispatch","decrementCount"],"mappings":"aAAA,IAAAA,OAAAC,QAAA,SAAAC,eAAA,SAAA,GAAA,IAAAC,GAAA,EAAAC,UAAAC,aAAAC,IAAA,EAAA,EAAA,IAAAC,YAAA,MAAA,CAGIC,KAAM,YADJN,iBAFN,IAAAC,EAAA,EAAAA,IAE0BI,eAAH,SAAA,GAAA,IAAAE,GAAA,EAAAL,UAAAC,aAAAC,IAAA,EAAA,EAAA,IAAAI,YAAA,MAAA,CAMnBF,KAAM,YANaE,iBAAA,IAAAD,EAAA,EAAAA,IAAAE,SAAA,SAAA,GAAA,MAAA,CAAvBH,KAAA,MAYII,OAZmB,EAAAR,UAAAC,aAAAC,IAAA,EAAA,EAAA,IAAAM,QAKAC,WAAA,WAAA,MAAA,CAAAL,KAAA,UAAvBM,aAAA,SAAA,EAAA,GAAA,IAAAC,EAAA,EAAAX,UAAAC,aAAAC,IAAA,EAAA,EAAA,CAAAM,MAAA,GAAAI,EAAA,EAAAZ,UAAAC,OAAA,OAAAC,EAkBI,OAAQU,EAAOR,MAbbG,IAAQ,YAAG,MAAA,CAAAC,MAAGA,EAAHA,MAAAI,EAAAT,aAAA,IAAqB,YAC5B,MAD4B,CAElCK,MAAAA,EAAAA,MAAAA,EAAAA,aAFJ,IAAA,QAuBY,MAAO,CAnBHA,MAAG,GACX,IAAE,MADS,MAAA,CAInBA,MAAAI,EAAAJ,OAEA,QAqBY,OAAOG,IAnBaH,OAAO,EAAAZ,OAAAiB,aAAAH,cAAgBI,MAAXF,UAAW,WA0BnDG,QAAQC,IAAIF,MAAMG,cAvBVH,MAAAI,SAAOpB,eAAA,CAAAK,YAAA,KACHK,MAAAA,SAAOG,kBADJG,MAAAI,SAAPT,cA6BZK,MAAMI,SAASC,kBA1BPL,MAAAI,SAAKC,eAAL,CAAAb,YAAA,MACIQ,MAAAI,SAAOX,SAAA,CAAAC,MAAA","file":"redux-101.min.js","sourcesContent":["import { createStore } from 'redux';\r\n\r\nconst incrementCount = ({ incrementBy = 1 } = {}) => ({\r\n    type: 'INCREMENT',\r\n    incrementBy\r\n});\r\n\r\nconst decrementCount = ({ decrementBy = 1 } = {}) => ({\r\n    type: 'DECREMENT',\r\n    decrementBy\r\n});\r\n\r\nconst setCount = ({ count } = {}) => ({\r\n    type: 'SET',\r\n    count\r\n})\r\nconst resetCount = () => ({\r\n    type: 'RESET',\r\n})\r\n\r\n//Reducer\r\n//Pure function (not depending on outside data)\r\n//Never change state or action\r\n\r\nconst countReducer = (state = { count: 0 }, action) => {\r\n    switch (action.type) {\r\n        case 'INCREMENT':\r\n            return {\r\n                count: state.count + action.incrementBy\r\n            };\r\n        case 'DECREMENT':\r\n            return {\r\n                count: state.count - action.decrementBy\r\n            };\r\n        case 'RESET':\r\n            return {\r\n                count: 0\r\n            };\r\n        case 'SET':\r\n            return {\r\n                count: action.count\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst store = createStore(countReducer);\r\n\r\nstore.subscribe(() => {\r\n    console.log(store.getState());\r\n});\r\n\r\nstore.dispatch(incrementCount({ incrementBy: 5 }));\r\nstore.dispatch(incrementCount());\r\nstore.dispatch(resetCount());\r\nstore.dispatch(decrementCount());\r\nstore.dispatch(decrementCount({ decrementBy: 10 }));\r\nstore.dispatch(setCount({ count: 101 }));\r\n\r\n"]}