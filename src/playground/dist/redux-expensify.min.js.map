{"version":3,"sources":["redux-expensify.js"],"names":["_redux","require","_uuid","addExpense","_ref","arguments","length","undefined","_ref$description","description","_ref$note","note","_ref$amount","amount","_ref$createdAt","createdAt","type","expense","id","v4","removeExpense","editExpense","updates","sortByDate","setStartDate","startDate","endDate","setTextFilter","expensesReducer","state","expensesReducerDefaultState","action","text","concat","_toConsumableArray","filter","_ref3","map","_objectSpread","sortByAmount","filtersReducerDefaultState","setEndDate","filtersReducer","sortBy","getVisibleExpenses","expenses","_ref4","startDateMatch","textMatch","toLowerCase","includes","endDateMatch","a","b","store","createStore","combineReducers","filters","subscribe","getState","console","log","visibleExpenses","expenseOne","dispatch","sort"],"mappings":"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","file":"redux-expensify.min.js","sourcesContent":["import { createStore, combineReducers } from 'redux';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n// ADD_EXPENSE\r\nconst addExpense = (\r\n    {\r\n        description = '',\r\n        note = '',\r\n        amount = 0,\r\n        createdAt = 0\r\n    } = {}\r\n) => ({\r\n    type: 'ADD_EXPENSE',\r\n    expense: {\r\n        id: uuidv4(),\r\n        description,\r\n        note,\r\n        amount,\r\n        createdAt\r\n    }\r\n});\r\n\r\n// REMOVE_EXPENSE\r\nconst removeExpense = ({ id } = {}) => ({\r\n    type: 'REMOVE_EXPENSE',\r\n    id\r\n});\r\n\r\n// EDIT_EXPENSE\r\nconst editExpense = (id, updates) => ({\r\n    type: 'EDIT_EXPENSE',\r\n    id,\r\n    updates\r\n});\r\n\r\n// SET_TEXT_FILTER\r\nconst setTextFilter = (text = '') => ({\r\n    type: 'SET_TEXT_FILTER',\r\n    text\r\n});\r\n\r\n// SORT_BY_DATE\r\nconst sortByDate = () => ({\r\n    type: 'SORT_BY_DATE'\r\n});\r\n\r\n// SORT_BY_AMOUNT\r\nconst sortByAmount = () => ({\r\n    type: 'SORT_BY_AMOUNT'\r\n});\r\n\r\n// SET_START_DATE\r\nconst setStartDate = (startDate) => ({\r\n    type: 'SET_START_DATE',\r\n    startDate\r\n});\r\n\r\n// SET_END_DATE\r\nconst setEndDate = (endDate) => ({\r\n    type: 'SET_END_DATE',\r\n    endDate\r\n});\r\n\r\n// Expenses Reducer\r\n\r\nconst expensesReducerDefaultState = [];\r\n\r\nconst expensesReducer = (state = expensesReducerDefaultState, action) => {\r\n    switch (action.type) {\r\n        case 'ADD_EXPENSE':\r\n            return [\r\n                ...state,\r\n                action.expense\r\n            ];\r\n        case 'REMOVE_EXPENSE':\r\n            return state.filter(({ id }) => id !== action.id);\r\n        case 'EDIT_EXPENSE':\r\n            return state.map((expense) => {\r\n                if (expense.id === action.id) {\r\n                    return {\r\n                        ...expense,\r\n                        ...action.updates\r\n                    };\r\n                } else {\r\n                    return expense;\r\n                };\r\n            });\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// Filters Reducer\r\n\r\nconst filtersReducerDefaultState = {\r\n    text: '',\r\n    sortBy: 'date',\r\n    startDate: undefined,\r\n    endDate: undefined\r\n};\r\n\r\nconst filtersReducer = (state = filtersReducerDefaultState, action) => {\r\n    switch (action.type) {\r\n        case 'SET_TEXT_FILTER':\r\n            return {\r\n                ...state,\r\n                text: action.text\r\n            };\r\n        case 'SORT_BY_AMOUNT':\r\n            return {\r\n                ...state,\r\n                sortBy: 'amount'\r\n            };\r\n        case 'SORT_BY_DATE':\r\n            return {\r\n                ...state,\r\n                sortBy: 'date'\r\n            };\r\n        case 'SET_START_DATE':\r\n            return {\r\n                ...state,\r\n                startDate: action.startDate\r\n            };\r\n        case 'SET_END_DATE':\r\n            return {\r\n                ...state,\r\n                endDate: action.endDate\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// Get visible expenses\r\nconst getVisibleExpenses = (expenses, { text, sortBy, startDate, endDate }) => {\r\n    return expenses.filter((expense) => {\r\n        const startDateMatch = typeof startDate !== 'number' || expense.createdAt >= startDate;\r\n        const endDateMatch = typeof endDate !== 'number' || expense.createdAt <= endDate;\r\n        const textMatch = expense.description.toLowerCase().includes(text.toLowerCase());\r\n\r\n        return startDateMatch && endDateMatch && textMatch;\r\n    }).sort((a, b) => {\r\n        if (sortBy === 'date') {\r\n            return a.amount < b.amount ? 1 : -1;\r\n        } else if (sortBy === 'amount') {\r\n            return a.amount < b.amount ? 1 : -1;\r\n        }\r\n    });\r\n};\r\n\r\n// Store creation\r\n\r\nconst store = createStore(\r\n    combineReducers({\r\n        expenses: expensesReducer,\r\n        filters: filtersReducer\r\n    })\r\n);\r\n\r\nstore.subscribe(() => {\r\n    const state = store.getState();\r\n    const visibleExpenses = getVisibleExpenses(state.expenses, state.filters);\r\n    console.log(visibleExpenses);\r\n});\r\n\r\nconst expenseOne = store.dispatch(addExpense({ description: 'Rent', amount: 100, createdAt: -2000 }));\r\nconst expenseTwo = store.dispatch(addExpense({ description: 'Coffee', amount: 300, createdAt: -1000 }));\r\n\r\n// store.dispatch(removeExpense({ id: expenseOne.expense.id }));\r\n// store.dispatch(editExpense(expenseTwo.expense.id, { amount: 500 }));\r\n\r\n// store.dispatch(setTextFilter('rent'));\r\n// store.dispatch(setTextFilter());\r\n\r\nstore.dispatch(sortByAmount());\r\n// store.dispatch(sortByDate());\r\n\r\n// store.dispatch(setStartDate(0)); // startDate 125\r\n// store.dispatch(setStartDate()); // startDate undefined\r\n// store.dispatch(setEndDate(999)); // endDate 1250\r\n\r\nconst demoState = {\r\n    expenses: [{\r\n        id: 'poijasdfhwer',\r\n        description: 'January Rent',\r\n        note: 'This was the final payment for that address',\r\n        amount: 54500,\r\n        createdAt: 0\r\n    }],\r\n    filters: {\r\n        text: 'rent',\r\n        sortBy: 'amount', // date or amount\r\n        startDate: undefined,\r\n        endDate: undefined\r\n    }\r\n};\r\n"]}